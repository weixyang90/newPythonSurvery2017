shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
Country
runApp()
runApp()
library(tectronics/google-motion-charts-with-r)
data(CityPopularity)
G <-  gvisGeoMap(CityPopularity, locationvar='City' ,numvar='Popularity',
options=list(region='US',
dataMode='markers',
colors='[0xFF8747, 0xFFB581, 0xc06000]'))
## Not run:
plot(G)
## End(Not run)
## Not run:
plot(G)
## Not run:
CityPopularity
runApp()
runApp()
runApp()
Country
gvisGeoChart(Country, locationvar=Country$country,  colorvar=Country$number,
options=list(region="world",
width="auto", height="480", colorAxis = "{colors: [ '#e31b23','#00853f']},"))
Geo <- gvisGeoChart(Exports, locationvar=’Country’, colorvar=’Profit’,
options=list(height=300, width=350))
Geo <- gvisGeoChart(Exports, locationvar='Country', colorvar='Profit',
options=list(height=300, width=350))
data(Andrew)
AndrewGeoMap <- gvisGeoMap(Andrew, locationvar='LatLong', numvar='Speed_kt',
hovervar='Category',
options=list(width=800,height=400,
region='US', dataMode='Markers'))
plot(AndrewGeoMap)
data(Andrew)
AndrewGeoMap <- gvisGeoMap(Andrew, locationvar='LatLong', numvar='Speed_kt',
hovervar='Category',
options=list(width=800,height=400,
region='US', dataMode='Markers'))
plot(AndrewGeoMap)
data(Andrew)
G4 <- gvisGeoMap(Andrew, locationvar="LatLong", numvar="Speed_kt",
hovervar="Category",
options=list(height=350, region="US", dataMode="markers"))
plot(G4)
data(Exports)
G1 <- gvisGeoMap(Exports, locationvar='Country', numvar='Profit',
options=list(dataMode="regions"))
plot(G1)
data(Exports)
G1 <- gvisGeoChart(Exports, locationvar='Country', numvar='Profit',
options=list(dataMode="regions"))
plot(G1)
data(Exports)
G1 <- gvisGeoMap(Exports, locationvar='Country', numvar='Profit',
options=list(dataMode="regions"))
plot(G1)
gvisGeoChart(Country, locationvar=Country$country,  colorvar=Country$number,
options=list(region="world",
width="auto", height="480", colorAxis = "{colors: [ '#e31b23','#00853f']},"))
plot(g)
g <- gvisGeoChart(Country, locationvar=Country$country,  colorvar=Country$number,
options=list(region="world",
width="auto", height="480", colorAxis = "{colors: [ '#e31b23','#00853f']},"))
plot(g)
runApp()
G2 <- gvisGeoMap(CityPopularity, locationvar='City', numvar='Popularity',
options=list(region='US', height=350,
dataMode='markers',
colors='[0xFF8747, 0xFFB581, 0xc06000]'))
plot(G2)
runApp()
View(Country)
runApp()
runApp()
runApp()
?gvisGeoChart
runApp()
runApp()
choice = c("Python")
G2 <- gvisGeoChart(Exports, "Country", "Profit",
options=list(region="150"))
plot(G2)
Exports
G2 <- gvisGeoChart(Country, "country", "number",
options=list(region="150"))
plot(G2)
G2 <- gvisGeoChart(Country, "country", "number",
options=list(region="world"))
G2 <- gvisGeoChart(Country, "country", "number",
options=list(region="world"))
plot(G2)
Exports
G2 <- gvisGeoChart(Country, "country", "number",
options=list(region="world"))
plot(G2)
G2 <- gvisGeoChart(Country, "country", "number",
options=list(region="world"))
plot(G2)
gvisGeoChart(Country, "country", "number",
options=list(region="world"))
Country
Exports
runApp()
WorldData <- map_data('world')
WorldData <- fortify(WorldData)
WorldData
runApp()
WorldData
runApp()
runApp()
map
map("world", plot=FALSE)
x = map("world", plot=FALSE)
map("world", plot=FALSE)
x = map("world", plot=FALSE)
x$names
y = x$names
y
Country
runApp()
runApp()
runApp()
gvisGeoChart(Country, 'country',  Country$number,
options=list(region="world", dataMode="regions",
width="auto", height="480", colorAxis = "{colors: [ '#e31b23','#00853f']},"))
happiness = read.csv(file = "2015.csv")
getwd
getwd()
happiness = read.csv(file = "./data/2015.csv")
gvisGeoChart(happiness, "Country", input$selected,
options=list(region="world", displayMode="regions",
width="auto", height="auto", colorAxis = "{colors: [ '#e31b23','#00853f']}"))
happiness
gvisGeoChart(happiness, "Country", happiness$Region,
options=list(region="world", displayMode="regions",
width="auto", height="auto", colorAxis = "{colors: [ '#e31b23','#00853f']}"))
happiness$Country
gvisGeoChart(Country, locationvar='Country', colorvar="number",
options=list(region="world", dataMode="regions",
width="auto", height="480", colorAxis = "{colors: [ '#e31b23','#00853f']},"))
gvisGeoChart(Country, locationvar='Country', colorvar="number",
options=list(dataMode="regions",
width="auto", height="480", colorAxis = "{colors: [ '#e31b23','#00853f']},"))
gvisGeoChart(Country, locationvar='Country', colorvar="number",
options=list(displayMode="Markers",
width="auto", height="480", colorAxis = "{colors: [ '#e31b23','#00853f']},"))
plot(Geo)
Geo=gvisGeoChart(Exports, locationvar="Country",
colorvar="Profit",
options=list(projection="kavrayskiy-vii"))
plot(Geo)
Geo=gvisGeoChart(Country, locationvar="country",
colorvar="number",
options=list(projection="kavrayskiy-vii"))
Geo=gvisGeoChart(Country, locationvar="country",
colorvar="number",
options=list(projection="kavrayskiy-vii"))
plot(Geo)
Exports
type(Exports$Country)
View(Country)
Country
Country = c %>% group_by(., country) %>% summarise(number = as.numeric(length(country)))
Geo=gvisGeoChart(Country, locationvar="country",
colorvar="number",
options=list(projection="kavrayskiy-vii"))
runApp()
runApp()
runApp()
runApp()
View(Country)
Country = na.omit(Country)
View(Country)
runApp()
runApp()
runApp()
runApp()
runApp()
Country<-data.frame(Country = unlist(Country))
Country
Country<-data.frame(Country = unlist(country))
runApp()
View(Country)
runApp()
runApp()
WorldData
View(WorldData)
View(Country)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
WorldData
WorldData <- map_data('world2')
WorldData
WorldData
View(WorldData)
Country[1]
Country['Country']
Country['country']
Country[Country$country == "United State"] = USA
Country[Country$country == "United State"] = "USA"
Country
View(Country)
Country[Country$country == "United States"] = "USA"
Country[Country$country == "United States"] = "USA"
Country[Country$country == "United States"]
Country[Country == "United States"]
Country[Country == "United States"] <- "USA"
WorldData <- map_data('world2')
data(poleff)
Country[Country$country == "United States"] <- "USA"
Country[Country$country == "United States"] <- "USA"
Country = c %>% group_by(., country) %>% summarise(number = as.numeric(length(country)))
Country[Country$number == "United States"] <- "USA"
View(Country)
Country[Country$country == "United States"] <- "USA"
Country[Country == "United States"] <- "USA"
Country[Country$number == 1638] <- "USA"
Country = c %>% group_by(., country) %>% summarise(number = as.numeric(length(country)))
Country[Country$number == 1638] <- "USA"
Country$country <- ifelse(Country$country=='United State', "USA", Country$country)
Country$country <- ifelse(Country$country=='United State', "USA", Country$country)
Country = c %>% group_by(., country) %>% summarise(number = as.numeric(length(country)))
Country$country <- ifelse(Country$country=='United State', "USA", Country$country)
Country = c %>% group_by(., country) %>% summarise(number = as.numeric(length(country)))
Country$country <- ifelse(Country$country=='United State', "USA", Country$country)
Country$country <- ifelse(Country$country=='United State', "USA")
Country = c %>% group_by(., country) %>% summarise(number = as.numeric(length(country)))
Country$country <- ifelse(Country$number==1638, "USA", Country$country)
Country = c %>% group_by(., country) %>% summarise(number = as.numeric(length(country)))
Country$country <- ifelse(Country$number==1638, "USA", Country$country)
Country = c %>% group_by(., country) %>% summarise(number = as.numeric(length(country)))
Country$country <- ifelse(Country$country=="United States", "USA", Country$country)
runApp()
Country$country
Country
Country$country <- ifelse(Country$country=="United States", "USA", country)
Country = c %>% group_by(., country) %>% summarise(number = as.numeric(length(country)))
Country$country[Country$country=="United States"] == "USA"
Country$country[Country$country=="United States"] == "USA"
Country$country[Country$country=="United States"]
Country$country[Country$number==1638]
Country$country[Country$number==1638] == "USA"
Country$country[Country$number==1638] = "USA"
Country$country[Country$number==1638] = as.factor("USA")
Country[Country$number==1638] = as.factor("USA")
Country[Country$number==1638]
Country = c %>% group_by(., country) %>% summarise(number = as.numeric(length(country)))
Country[Country$number==1638]
Country$country[Country$number==1638]
Country$country = factor(Country$country)
Country$country[Country$country == "United States"] == "USA"
Country$country[Country$country == "United States"] = "USA"
Country$country = as.character(Country$country)
Country$country[Country$country == "United States"] = "USA"
View(Country)
Country = c %>% group_by(., country) %>% summarise(number = as.numeric(length(country)))
Country = na.omit(Country)
Country$country = as.character(Country$country)
Country$country[Country$country == "United States"] = "USA"
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
usage
#usage %>% mutate(., result = ifelse(type == "No, I dont use Python for my current projects", result = "No", ifelse(type == "No, I use Python as a secondary language", result = "second", result = type)))
usage = usage %>% group_by(., type) %>% summarise(ratio = length(type)/nrows(type))
#usage %>% mutate(., result = ifelse(type == "No, I dont use Python for my current projects", result = "No", ifelse(type == "No, I use Python as a secondary language", result = "second", result = type)))
usage = usage %>% group_by(., type) %>% summarise(ratio = length(type)/nrow(type))
#usage %>% mutate(., result = ifelse(type == "No, I dont use Python for my current projects", result = "No", ifelse(type == "No, I use Python as a secondary language", result = "second", result = type)))
usage = usage %>% group_by(., type) %>% summarise(ratio = length(type)/nrow(usage))
usage
usage = data %>% select(., type=Is.Python.the.main.language.you.use.for.your.current.projects.)
usage <- data.frame(lapply(usage, as.character), stringsAsFactors=FALSE)
class(usage)
#usage %>% mutate(., result = ifelse(type == "No, I dont use Python for my current projects", result = "No", ifelse(type == "No, I use Python as a secondary language", result = "second", result = type)))
usage = usage %>% group_by(., type) %>% summarise(ratio = length(type)/nrow(usage))
usage
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
